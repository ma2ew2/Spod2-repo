/*

  WiFi Web Server


 A simple web server that shows the value of the analog input pins.


 This example is written for a network using WPA encryption. For

 WEP or WPA, change the Wifi.begin() call accordingly.


 Circuit:

 * Analog inputs attached to pins A0 through A5 (optional)


 created 13 July 2010

 by dlf (Metodo2 srl)

 modified 31 May 2012

 by Tom Igoe

 further modified 10 November 2023

 by Adam Golden

 */

// Code sourced from https://circuitdigest.com/microcontroller-projects/interfacing-mq2-gas-sensor-with-arduino

//TRYING TO GET RID OF THESE
#define moxPin0 A0
#define moxPin1 A1
#define moxPin2 A2
#define moxPin3 A3
#define moxPin4 A4
#define moxPin5 A5

// BME 688 SETUP, includes libraries and pin definitions. Pin 13 and 10 may not be necessary to define, due to i2c only using 11 and 12. Leaving it this way for now.

#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include "Adafruit_BME680.h"

#define BME_SCK 13
#define BME_MISO 12
#define BME_MOSI 11
#define BME_CS 10

#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME680 bme; // I2C
//Adafruit_BME680 bme(BME_CS); // hardware SPI
//Adafruit_BME680 bme(BME_CS, BME_MOSI, BME_MISO,  BME_SCK);

#include <WiFiNINA.h>

#include <utility/wifi_drv.h> // using this to create a blinking LED to monitor activity


//NOT USING THE SECRETS FOR THIS

//#include "arduino_secrets.h" 

///////please enter your sensitive data in the Secret tab/arduino_secrets.h

char ssid[] = "";        // your network SSID (name)

char pass[] = "";    // your network password (use for WPA, or use as key for WEP)

int keyIndex = 0;                 // your network key Index number (needed only for WEP)


int status = WL_IDLE_STATUS;


WiFiServer server(80);

int pageViewCount = 0;

void setup() {
  //Initialize serial and wait for port to open:

  //Serial.begin(9600);

  //while (!Serial) {

  //  ; // wait for serial port to connect. Needed for native USB port only

  //}
  /*
  //BEGIN BME 680 SETUP CODE
  Serial.println(F("BME680 test"));

  if (!bme.begin()) {
    Serial.println("Could not find a valid BME680 sensor, check wiring!");
    while (1);
  }

  // Set up oversampling and filter initialization
  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150); // 320*C for 150 ms
  //END BME 680 SETUP CODE
*/
  // check for the WiFi module:gi

  if (WiFi.status() == WL_NO_MODULE) {

    Serial.println("Communication with WiFi module failed!");

    // don't continue

    while (true);

  }


  String fv = WiFi.firmwareVersion();

  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {

    Serial.println("Please upgrade the firmware");

  }


  // attempt to connect to Wifi network:

  while (status != WL_CONNECTED) {

    Serial.print("Attempting to connect to SSID: ");

    Serial.println(ssid);

    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:

    status = WiFi.begin(ssid);
    Serial.println(status);



    // wait 10 seconds for connection:
  
    delay(10000);

  }

  server.begin();

  // you're connected now, so print out the status:

  printWifiStatus();
  WiFiDrv::analogWrite(26, 255);   //GREEN


}



void loop() {
  // listen for incoming clients
  WiFiClient client = server.available();

  if (client) {

    Serial.println("new client");

    // an http request ends with a blank line

    boolean currentLineIsBlank = true;

    while (client.connected()) {

      if (client.available()) {

        char c = client.read();

        Serial.write(c);

        // if you've gotten to the end of the line (received a newline

        // character) and the line is blank, the http request has ended,

        // so you can send a reply

        if (c == '\n' && currentLineIsBlank) {

          // send a standard http response header

          client.println("HTTP/1.1 200 OK");

          client.println("Content-Type: text/html");

          client.println("Connection: close");  // the connection will be closed after completion of the response

          //client.println("Refresh: 5");  // refresh the page automatically every 5 sec ADAM NOTE: WE MAY NOT WANT THIS. we want the client to decide how often the data comes. see if getting rid of this line stops the constant refresh.

          client.println();

          client.println("<!DOCTYPE HTML>");

          client.println("<html>");

          // output the value of each analog input pin
/*
          for (int analogChannel = 0; analogChannel < 7; analogChannel++) {

            int sensorReading = analogRead(analogChannel);

            client.print("analog input ");

            client.print(analogChannel);

            client.print(" is ");

            client.print(sensorReading);

            client.println("<br />");

          }
*/
        // TRYING TO GET RID OF THIS, see code at end of loop for new method.
        //BEGIN MQ SENSOR LOOP CODE
        client.println(readSensor0());
        client.println(",");
        client.println(readSensor1());
        client.println(",");
        client.println(readSensor2());
        client.println(",");
        client.println(readSensor3());
        client.println(",");
        client.println(readSensor4());
        client.println(",");
        client.println(readSensor5());
        //client.println();
        //END MQ SENSOR LOOP CODE
        //BEGIN BME 680 LOOP CODE
        /*
          if (! bme.performReading()) {
            client.println("Failed to perform reading :(");
            return;
          }
          client.print("Temperature = ");
          client.print(bme.temperature);
          client.println(" *C");
          client.println("<br />");

          client.print("Pressure = ");
          client.print(bme.pressure / 100.0);
          client.println(" hPa");
          client.println("<br />");

          client.print("Humidity = ");
          client.print(bme.humidity);
          client.println(" %");
          client.println("<br />");

          client.print("Gas = ");
          client.print(bme.gas_resistance / 1000.0);
          client.println(" KOhms");
          client.println("<br />");

          client.print("Approx. Altitude = ");
          client.print(bme.readAltitude(SEALEVELPRESSURE_HPA));
          client.println(" m");
          client.println("<br />");

          client.println();
          client.println();
        //END BME 680 LOOP CODE
          pageViewCount = pageViewCount + 1;
          client.print("Page View Count Since Last Reboot: ");
          client.println(pageViewCount);
          client.println("</html>");
        */
          

          break;

        }

        if (c == '\n') {

          // you're starting a new line

          currentLineIsBlank = true;

        } else if (c != '\r') {

          // you've gotten a character on the current line

          currentLineIsBlank = false;

        }

      }

    }

    // give the web browser time to receive the data

    delay(1);


    // close the connection:

    client.stop();

    Serial.println("client disconnected");
  }

}



void printWifiStatus() {

  // print the SSID of the network you're attached to:

  Serial.print("SSID: ");

  Serial.println(WiFi.SSID());


  // print your board's IP address:

  IPAddress ip = WiFi.localIP();

  Serial.print("IP Address: ");

  Serial.println(ip);


  // print the received signal strength:

  long rssi = WiFi.RSSI();

  Serial.print("signal strength (RSSI):");

  Serial.print(rssi);

  Serial.println(" dBm");
}

// This is super ugly and simple but it works. will figure out how to condense this with input values later.

int readSensor0() {
  unsigned int sensorValue = analogRead(moxPin0);  // Read the analog value from sensor
  unsigned int outputValue = map(sensorValue, 0, 1023, 0, 255); // map the 10-bit data to 8-bit data
  return outputValue;             // Return analog value
}
int readSensor1() {
  unsigned int sensorValue = analogRead(moxPin1);  // Read the analog value from sensor
  unsigned int outputValue = map(sensorValue, 0, 1023, 0, 255); // map the 10-bit data to 8-bit data
  return outputValue;             // Return analog value
}
int readSensor2() {
  unsigned int sensorValue = analogRead(moxPin2);  // Read the analog value from sensor
  unsigned int outputValue = map(sensorValue, 0, 1023, 0, 255); // map the 10-bit data to 8-bit data
  return outputValue;             // Return analog value
}
int readSensor3() {
  unsigned int sensorValue = analogRead(moxPin3);  // Read the analog value from sensor
  unsigned int outputValue = map(sensorValue, 0, 1023, 0, 255); // map the 10-bit data to 8-bit data
  return outputValue;             // Return analog value
}
int readSensor4() {
  unsigned int sensorValue = analogRead(moxPin4);  // Read the analog value from sensor
  unsigned int outputValue = map(sensorValue, 0, 1023, 0, 255); // map the 10-bit data to 8-bit data
  return outputValue;             // Return analog value
}
int readSensor5() {
  unsigned int sensorValue = analogRead(moxPin5);  // Read the analog value from sensor
  unsigned int outputValue = map(sensorValue, 0, 1023, 0, 255); // map the 10-bit data to 8-bit data
  return outputValue;             // Return analog value
}
